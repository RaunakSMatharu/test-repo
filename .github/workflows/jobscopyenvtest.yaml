name: test-mask-1
on:
  workflow_dispatch:
    inputs:
      secret_value:
        description: "Secret value"
        required: true
        type: string

jobs:
  mask-job:
    runs-on: ubuntu-latest
    outputs:
      SECRET_OUT: ${{ steps.emit.outputs.secret }}
    steps:
      # Mask in THIS job with github-script (no echo)
      - name: Mask secret (no echo)
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const p = process.env.GITHUB_EVENT_PATH;
            const evt = JSON.parse(fs.readFileSync(p, 'utf8'));
            const secret = evt.inputs.secret_value;
            core.setSecret(secret); // job-scoped mask

      # Expose the value as a job output (safe; not printed)
      - id: emit
        name: env-maskingstep
        shell: bash
        run: echo "secret=${{ inputs.secret_value }}" >> "$GITHUB_OUTPUT"

  print-job:
    runs-on: ubuntu-latest
    needs: mask-job
    steps:
      # Re-mask in THIS job with github-script (masks are job-scoped)
      - name: Mask again via github-script
        uses: actions/github-script@v7
        env:
          SECRET_FROM_PREV: ${{ needs.mask-job.outputs.SECRET_OUT }}
        with:
          script: |
            core.setSecret(process.env.SECRET_FROM_PREV);

      # ⬇️ Your requested line, called in the NEXT JOB
      - id: capture
        shell: bash
        run: echo "secret=${{ needs.mask-job.outputs.SECRET_OUT }}" >> "$GITHUB_OUTPUT"

      # Optionally load into an env var for subsequent steps (without echoing the value)
      - name: Persist env var (no echo)
        shell: bash
        run: |
          {
            echo "KEY_SECRET_VAL<<EOF"
            printf '%s\n' '${{ steps.capture.outputs.secret }}'
            echo "EOF"
          } >> "$GITHUB_ENV"

      - name: Test logs (will be masked)
        shell: bash
        run: |
          echo "This will be masked: $KEY_SECRET_VAL"
